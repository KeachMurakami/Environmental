{
    "contents" : "making graphs (Temp Hum, and Volt) from Graphtec Logger data\n========================================================\n```{r eval = TRUE}\n\n#修正/加筆必要箇所  \n#　1日でファイルを複数回保存したときの挙動: CSVがふたつ  \n#　開始時間と終了時間でフィルタリング: 90行付近に加筆\n#  測定期間中の測定器の移動があった場合の処理: 別にファイルが必要\n\nopts_chunk$set(eval = TRUE,\n               error = FALSE,\n               prompt = TRUE,\n               message = FALSE,\n               fig.hight = 20,\n               fig.width = 12,\n               warning = FALSE)\n\nlibrary(tidyr)\nlibrary(data.table)\n```\n\n```{r input, echo = FALSE}\n\n# A: chamA-F @419\n# B: chamK-N @420\n# C: chamA-B @419 or moving\n# D: chamG-J @420\nhome.dir()\nsetwd(dir = \"~/GitHub/BeeLabR/environmental/GL_grapher/\")\n\nMemo.file <-\n  dir(pattern = \"xlsx\")\nMemo.dat <- \n  Memo.file %>%\n  read.xlsx(sheetIndex = 1, stringsAsFactors = FALSE)\n\nif(length(Memo.file) == 0) print(\"no memo file found\")\n  \nGL_id <- Memo.dat[1, 2]\nPlant <- Memo.dat[2, 2]\nRoom <- Memo.dat[3, 2]\nMemo <- Memo.dat[4, 2]\n\nStartDay <- Memo.dat[5, 2] %>% as.numeric\nStartTime <- Memo.dat[6, 2]\nEndDay <- Memo.dat[7, 2] %>% as.numeric\nEndTime <- Memo.dat[8, 2]\n\nMemo.dat1 <-\n  Memo.dat %>%\n  select(-(1:2)) %>%\n  filter(is.used. > 0)\n\nch.names <- Memo.dat1$Channel\nch.types <- Memo.dat1$What.\nch.num <- length(ch.names)\nchamID <- Memo.dat1$Where.\nLightSources <- Memo.dat1$LightSources\nRemarks <- Memo.dat1$Remarks\n\ntype.num <- \n  ch.types %>%\n  table %>%\n  length\n\ntypes <-\n  ch.types %>%\n  unique\nMemo.dat2 <-\n  Memo.dat1 %>%\n  mutate(Names = paste0(Where., \":\", What.)) %>%\n  select(-is.used., -Where., -What., -LightSources, -Remarks)\n\nDataDirs <-\n  dir(paste0(\"./\", GL_id, \"/\"))\n\nDataDirsUsed <-\n  DataDirs[(as.numeric(DataDirs) > StartDay) & (as.numeric(DataDirs) <= EndDay)]\n\nDataFiles <-\n  dir(paste0(\"./\", GL_id, \"/\", DataDirsUsed, \"/\"), full.names = TRUE)\n\n\nif(length(DataFiles) == 0) print(\"no CSV files detected\")\n\nskip_rows <- ifelse(GL_id == \"D\", yes = 33, no = 23)\n  data <-\n    lapply(1:length(DataFiles), function(x){\n      temp <-\n        fread(input = DataFiles[x], sep = \",\", skip = skip_rows, header = TRUE) %>%\n        select(2, (3 + ch.names))\n      setnames(x = temp, c(\"Time\", paste0(chamID, \":\", ch.types)))\n      temp %>%\n        return\n      }) %>%\n  rbind_all\nrm(skip_rows)\n```\n\nInformation\n-----------\n* calculated at `r Sys.time()`  \n* File name: `r DataFiles`  \n* Logger ID:`r paste0(\"GLid:\", GL_id)`  \n* chamber ID:  cham `r chamID`  \n* for `r Plant` in `r Room` with `r LightSources`.  \n* `r Remarks`  \n\n```{r data_handling}\nDNdet <- function(Hour, ONtime, OFFtime){\n  Hour <- as.numeric(Hour)\n    ifelse(test = (Hour >= ONtime && Hour < OFFtime) , yes = \"Day\", no = \"Night\")\n}\n\ndata1 <-\n  data %>%\n  separate(col = Time, into = c(\"Day\", \"time\"), sep = \" \", remove = F) %>%  \n  separate(col = time, into = c(\"Hour\", \"Min\", \"Sec\"), sep = \":\") %>%\n  select(-Day, -Min, -Sec)\n  \n\ndata2 <-\n  lapply(1:ch.num, function(x){\n    temp <-\n      Memo.dat2 %>%\n      filter(Channel == ch.names[x])\n    data1 %>%\n      select(Time, Hour, value = (x + 2)) %>%\n      mutate(LightOn = temp$LightOn, LightOff = temp$LightOff,\n             DayNight = Vectorize(DNdet)(Hour, LightOn, LightOff),\n             value = temp$slope * value + temp$intercept,\n             variable = temp$Names) %>%\n      select(Time, DayNight, value, variable) %>%\n      return\n    }) %>%\n    rbind_all\n\ndaily_summary <-\n  data2 %>%\n  separate(col = Time, into = c(\"Day\", \"Time\"), sep = \" \", remove = T) %>%\n  select(-Time) %>%\n  group_by(Day, DayNight, variable) %>%\n  summarise_each(funs(mean2, sd2)) %>%\n  mutate(ave = sprintf(\"%.1f\", mean2),\n         sd = sprintf(\"%.2f\", sd2),\n         ave.sd = paste0(ave, \"+-\", sd, \"SD\")) %>%\n  select(Day, DayNight, variable, ave, sd, ave.sd) %>%\n  separate(col = variable, into = c(\"chamID\", \"log\"), sep = \":\", remove = T)\n\nspan_summary <-\n  data2 %>%\n  select(-Time) %>%\n  group_by(DayNight, variable) %>%\n  summarise_each(funs(mean2, sd2)) %>%\n  mutate(ave = sprintf(\"%.1f\", mean2),\n         sd = sprintf(\"%.2f\", sd2),\n         ave.sd = paste0(ave, \"+-\", sd, \"SD\")) %>%\n  select(DayNight, variable, ave, sd, ave.sd) %>%\n  separate(col = variable, into = c(\"chamID\", \"log\"), sep = \":\", remove = T)\n```\n\n\n```{r Graphics}\ndata3 <- data2\ndata3$Time <- as.POSIXct(strptime(data3$Time, format = \"%Y/%m/%d %H:%M:%S\"))\n\n\nGraphics <-\n  lapply(1:type.num, function(x){\n    data4 <-\n      data3 %>%\n      separate(col = variable, into = c(\"chamID\", \"log\"), sep = \":\", remove = T) %>%\n      filter(log == types[x])\n  \n    hists <- \n      data4 %>%\n      ggplot(data = ., aes(x = value, y = ..density.., fill = DayNight)) +\n      theme_bw(20) +\n      geom_histogram(binwidth = 0.1, color = \"grey\", fill = \"cornsilk\", alpha = 0.5) +\n      geom_density(color = \"grey\", alpha = 0.3) +\n      xlab(NULL) +\n      facet_wrap( ~ chamID)\n  \n    timecourse <-\n      data4 %>%\n      ggplot(aes(x = Time, y = value, color = DayNight)) +\n      theme_bw(20) +\n      geom_line(color = \"grey\") +\n      geom_point(alpha = 0.5) +\n      facet_wrap(~ chamID)\n    \n    list(Histgram = hists, TimeCourse = timecourse) %>%\n      return\n    })\n\nnames(Graphics) <- types\n```\n\n```{r Output, warning = FALSE}\n# file.info\nfile.info(DataFiles) %>% kable\nfile.info(Memo.file) %>% kable\n\ndaily_summary %>% kable\nspan_summary %>% kable\n\nGraphics\n\nsessionInfo()\n```\n\n```{r eval = FALSE, echo = FALSE}\nhome.dir()\nsetwd(\"~/GitHub/BeeLabR/Environmental/GL_grapher/\")\nknit2html(\"./GL_grapher.Rmd\", output = paste0(\"./\", str_sub(Memo.file, end = -6), \".html\"))\n```",
    "created" : 1433333314043.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4061630557",
    "id" : "59A0D272",
    "lastKnownWriteTime" : 1433333545,
    "path" : "~/GitHub/BeeLabR/Environmental/GL_grapher/GL_grapher.Rmd",
    "project_path" : "GL_grapher/GL_grapher.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}